version: 2.1

orbs:
  win: circleci/windows@5.0

executors:
  linux-executor:
    docker:
      - image: cimg/base:stable
  windows-executor:
    machine:
      image: windows-server-2022-gui:current

commands:
  install-linux-dependencies:
    steps:
      - run:
          name: Install Linux Dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y libglfw3-dev xorg-dev libegl1-mesa-dev libwayland-dev libxkbcommon-dev wayland-protocols

            # Install newer CMake
            CMAKE_VERSION="3.26.3"
            wget https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-linux-x86_64.sh
            chmod +x cmake-${CMAKE_VERSION}-linux-x86_64.sh
            sudo ./cmake-${CMAKE_VERSION}-linux-x86_64.sh --skip-license --prefix=/usr/local
            
            # Install Vulkan SDK
            VULKAN_VERSION="1.3.283.0"
            wget https://sdk.lunarg.com/sdk/download/1.3.283.0/linux/vulkansdk-linux-x86_64-${VULKAN_VERSION}.tar.xz
            tar xf vulkansdk-linux-x86_64-${VULKAN_VERSION}.tar.xz
            cd ${VULKAN_VERSION}
            ./vulkansdk -i
            
            echo 'export VULKAN_SDK="$HOME/VulkanSDK/${VULKAN_VERSION}/x86_64"' >> $BASH_ENV
            echo 'export PATH="$VULKAN_SDK/bin:$PATH"' >> $BASH_ENV
            echo 'export LD_LIBRARY_PATH="$VULKAN_SDK/lib:$LD_LIBRARY_PATH"' >> $BASH_ENV
            echo 'export VK_LAYER_PATH="$VULKAN_SDK/etc/vulkan/explicit_layer.d"' >> $BASH_ENV
            source $BASH_ENV

  install-windows-dependencies:
    steps:
      - run:
          name: Install Windows Dependencies
          command: |
            $vulkanSDK = "https://sdk.lunarg.com/sdk/download/1.3.283.0/windows/VulkanSDK-1.3.283.0-Installer.exe"
            Invoke-WebRequest -Uri $vulkanSDK -OutFile VulkanSDK-Installer.exe
            .\VulkanSDK-Installer.exe --accept-licenses --default-answer --confirm-command install

jobs:
  build-and-test:
    parameters:
      os:
        type: string
      build_type:
        type: string
        default: "Release"
      c_compiler:
        type: string
      cpp_compiler:
        type: string
    executor: << parameters.os >>-executor
    steps:
      - checkout
      - when:
          condition:
            equal: [ << parameters.os >>, "linux" ]
          steps:
            - install-linux-dependencies
      - when:
          condition:
            equal: [ << parameters.os >>, "windows" ]
          steps:
            - install-windows-dependencies
      - restore_cache:
          keys:
            - cpm-cache-<< parameters.os >>-{{ checksum "CMakeLists.txt" }}
            - cpm-cache-<< parameters.os >>-
      - run:
          name: Configure CMake
          command: |
            mkdir build
            cd build
            cmake .. -DCMAKE_CXX_COMPILER=<< parameters.cpp_compiler >> -DCMAKE_C_COMPILER=<< parameters.c_compiler >> -DCMAKE_BUILD_TYPE=<< parameters.build_type >> -DCPM_SOURCE_CACHE=~/.cpm -DENABLE_TESTING=ON
      - run:
          name: Build
          command: |
            cd build
            cmake --build . --config << parameters.build_type >>
      - run:
          name: Test
          command: |
            cd build
            ctest --build-config << parameters.build_type >> --output-on-failure -VV --verbose --output-junit ../scripts/junitout.xml
          when: always
      - store_test_results:
          path: scripts
      - save_cache:
          paths:
            - ~/.cpm
          key: cpm-cache-<< parameters.os >>-{{ checksum "CMakeLists.txt" }}
      - run:
          name: Convert XML to CTRF
          command: |
            pip install defusedxml pillow
            python scripts/OutPutResultsToJsons.py scripts/junitout.xml "Real Test" --json_output scripts/finalresult.json --discord_json_output scripts/discordJson_output.json --image_out scripts/discrod_image.png --os << parameters.os >> --compiler << parameters.c_compiler >> --event ${CIRCLE_JOB} --author ${CIRCLE_USERNAME} --branch ${CIRCLE_BRANCH}
      - store_artifacts:
          path: scripts/discrod_image.png
          destination: discord_image

workflows:
  version: 2
  build-all:
    jobs:
      - build-and-test:
          name: linux-gcc
          os: linux
          build_type: Release
          c_compiler: gcc
          cpp_compiler: g++
      - build-and-test:
          name: linux-clang
          os: linux
          build_type: Release
          c_compiler: clang
          cpp_compiler: clang++
      - build-and-test:
          name: windows-msvc
          os: windows
          build_type: Release
          c_compiler: cl
          cpp_compiler: cl
