name: Building for multiple platforms

on:
  push:
    branches:
      [ "build" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: UBUNTU - Cache CPM packages
        uses: actions/cache@v4
        with:
          path: ~/.cpm
          key: ${{ runner.os }}-cpm-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
          restore-keys: |
            ${{ runner.os }}-cpm-

      - name: WINDOWS - Cache CPM packages
        uses: actions/cache@v4
        with:
          path: $env:$env:USERPROFILE\\.cpm
          key: ${{ runner.os }}-cpm-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
          restore-keys: |
            ${{ runner.os }}-cpm-

      - name: UBUNTU - Install dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libglfw3-dev xorg-dev libegl1-mesa-dev libwayland-dev libxkbcommon-dev wayland-protocols

      - name: UBUNTU - Install Vulkan SDK
        if: matrix.os == 'ubuntu-latest'
        run: |
          wget -qO- https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo tee /etc/apt/trusted.gpg.d/lunarg.asc
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-jammy.list http://packages.lunarg.com/vulkan/lunarg-vulkan-jammy.list
          sudo apt update
          sudo apt install vulkan-sdk

      - name: WINDOWS - Install Vulkan SDK
        if: matrix.os == 'windows-latest'
        run: |
          $vulkanSDK = "https://sdk.lunarg.com/sdk/download/1.3.283.0/windows/VulkanSDK-1.3.283.0-Installer.exe"
          Invoke-WebRequest -Uri $vulkanSDK -OutFile VulkanSDK-Installer.exe
          .\VulkanSDK-Installer.exe --accept-licenses --default-answer --confirm-command install

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: UBUNUTU - Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}
          -DCPM_SOURCE_CACHE=~/.cpm
          -DENABLE_TESTING=OFF

      - name: WINDOWS - Configure CMake
        if: runner.os == 'Windows'
        run: |
          cmake -B ${{ steps.strings.outputs.build-output-dir }} `
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} `
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} `
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
            -S ${{ github.workspace }} `
            -DCPM_SOURCE_CACHE=$env:$env:USERPROFILE\\.cpm `
            -DENABLE_TESTING=OFF
        shell: pwsh

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      # - name: List files in directory (Windows)
      #   if: matrix.os == 'windows-latest'
      #   run: |
      #     $directory = "${{ steps.strings.outputs.build-output-dir }}"
      #     Write-Output "Listing files in $directory:"
      #     Get-ChildItem -Path $directory -Recurse
      #   shell: pwsh

      # - name: List files in directory (Linux)
      #   if: matrix.os == 'ubuntu-latest'
      #   run: |
      #     directory="${{ steps.strings.outputs.build-output-dir }}"
      #     echo "Listing files in $directory:"
      #     ls -R $directory

      - name: WINDOWS - Check if directory is empty
        if: matrix.os == 'windows-latest'
        id: check_directory_windows
        run: |
          $directory = "${{ steps.strings.outputs.build-output-dir }}/bin/${{ matrix.build_type }}"
          if ((Get-ChildItem -Path $directory -Recurse | Measure-Object).Count -eq 0) {
            Write-Output "Directory is empty."
            exit 1
          } else {
            Write-Output "Directory is not empty."
          }
        shell: pwsh

      - name: UBUNTU - Check if directory is empty
        if: matrix.os == 'ubuntu-latest'
        id: check_directory_linux
        run: |
          if [ -z "$(find ${{ steps.strings.outputs.build-output-dir }}/bin -mindepth 1 -print -quit)" ]; then
            echo "Directory is empty."
            exit 1
          else
            echo "Directory is not empty."
          fi

      - name: WINDOWS - Upload Artifact
        if: success() && matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        id: windows-artifact-upload-step
        with:
            name: ${{ matrix.os }}-${{ matrix.c_compiler}}-build
            path: ${{ steps.strings.outputs.build-output-dir }}/bin/${{ matrix.build_type }}

      - name: UBUNTU - Upload Artifact
        if: success() && matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        id: linux-artifact-upload-step
        with:
            name: ${{ matrix.os }}-${{ matrix.c_compiler}}-build
            path: ${{ steps.strings.outputs.build-output-dir }}/bin

      - name: WINDOWS - Post results to Discord
        if: success() && matrix.os == 'windows-latest'
        uses: tsickert/discord-webhook@v6.0.0
        with:
            webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
            content: 'Windows build URL is ${{ steps.windows-artifact-upload-step.outputs.artifact-url }}'

      - name: UBUNTU - Post results to Discord
        if: success() && matrix.os == 'ubuntu-latest'
        uses: tsickert/discord-webhook@v6.0.0
        with:
            webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
            content: 'Linux build URL is ${{ steps.linux-artifact-upload-step.outputs.artifact-url }}'
