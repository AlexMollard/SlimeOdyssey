name: Building for multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: UBUNTU - Install dependencies
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get install -y libglfw3-dev xorg-dev libegl1-mesa-dev libwayland-dev libxkbcommon-dev wayland-protocols

    - name: UBUNTU - Install Vulkan SDK
      if: matrix.os == 'ubuntu-latest'
      run: |
          wget -qO- https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo tee /etc/apt/trusted.gpg.d/lunarg.asc
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-jammy.list http://packages.lunarg.com/vulkan/lunarg-vulkan-jammy.list
          sudo apt update
          sudo apt install vulkan-sdk
      
    - name: WINDOWS - Install Vulkan SDK
      if: matrix.os == 'windows-latest'
      run: |
          curl -L -o VulkanSDK-1.2.183-Installer.exe https://sdk.lunarg.com/sdk/download/1.3.283.0/windows/VulkanSDK-1.3.283.0-Installer.exe
          .\VulkanSDK-1.2.183-Installer.exe  --accept-licenses --default-answer --confirm-command install

    - name: WINDOWS - Set Vulkan SDK environment variables
      if: matrix.os == 'windows-latest'
      # Grab the first version in the VulkanSDK directory
      run: |
          $vulkan_sdk = Get-ChildItem -Path "C:\VulkanSDK" | Select-Object -First 1
          $env:VULKAN_SDK = $vulkan_sdk.FullName
          $env:VK_SDK_PATH = $vulkan_sdk.FullName
          $env:VK_LAYER_PATH = "$env:VULKAN_SDK\Bin; $env:VULKAN_SDK\Bin\glslang\Release; $env:VULKAN_SDK\Bin\spirv-tools\Release; $env:VULKAN_SDK\Bin\spirv-cross\Release; $env:VULKAN_SDK\Bin\spirv-headers\Release; $env:VULKAN_SDK\Bin\spirv-val\Release; $env:VULKAN_SDK\Bin\spirv-tools\Release; $env:VULKAN_SDK\Bin\spirv-cross\Release; $env:VULKAN_SDK\Bin\spirv-headers\Release; $env:VULKAN_SDK\Bin\spirv-val\Release"
          $env:VK_ICD_FILENAMES = "$env:VULKAN_SDK\Bin\vk_swiftshader_icd.json"
          $env:VK_LAYER_PATH = "$env:VULKAN_SDK\Bin; $env:VULKAN_SDK\Bin\glslang\Release; $env:VULKAN_SDK\Bin\spirv-tools\Release; $env:VULKAN_SDK\Bin\spirv-cross\Release; $env:VULKAN_SDK\Bin\spirv-headers\Release; $env:VULKAN_SDK\Bin\spirv-val\Release; $env:VULKAN_SDK\Bin\spirv-tools\Release; $env:VULKAN_SDK\Bin\spirv-cross\Release; $env:VULKAN_SDK\Bin\spirv-headers\Release; $env:VULKAN_SDK\Bin\spirv-val\Release"

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: |
        ctest --build-config ${{ matrix.build_type }} --output-on-failure -VV
